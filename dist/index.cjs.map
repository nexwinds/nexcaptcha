{"version":3,"sources":["../src/index.ts","../src/components/Captcha.tsx","../src/hooks/useCaptcha.ts","../src/utils/invisibleFilters.ts","../src/utils/proofOfWork.ts","../src/utils/challenges.ts","../src/utils/validation.ts","../src/translations.ts","../src/components/SimpleCaptcha.tsx"],"sourcesContent":["export { Captcha } from './components/Captcha';\nexport { SimpleCaptcha } from './components/SimpleCaptcha';\nexport { useCaptcha } from './hooks/useCaptcha';\nexport type { \n  CaptchaProps, \n  CaptchaResult, \n  CaptchaLanguage,\n  ChallengeType,\n  ValidationResult \n} from './types';\nexport { validateCaptcha } from './utils/validation';\nexport { generateProofOfWork, validateProofOfWork } from './utils/proofOfWork';","import React, { useEffect, useRef, useState } from 'react';\r\nimport { CaptchaProps, DragDropChallenge, AudioChallenge, EmojiChallenge } from '../types';\r\nimport { useCaptcha } from '../hooks/useCaptcha';\r\nimport { getTranslation, formatTranslation } from '../translations';\r\nimport { generateAudioDataUrl } from '../utils/challenges';\r\n\r\nexport const Captcha: React.FC<CaptchaProps> = ({\r\n  lang = 'en',\r\n  onValidate,\r\n  className = '',\r\n  difficulty = 'medium'\r\n}) => {\r\n  const captchaRef = useRef<HTMLDivElement>(null);\r\n  const [_draggedItem, setDraggedItem] = useState<string | null>(null);\r\n  const [selectedAudio, setSelectedAudio] = useState<string | null>(null);\r\n  const [_selectedEmoji, setSelectedEmoji] = useState<string | null>(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalStep, setModalStep] = useState(0);\r\n  \r\n  const {\r\n    isLoading,\r\n    isVerifying,\r\n    isCompleted,\r\n    error,\r\n    challengeType,\r\n    challenge,\r\n    startChallenge,\r\n    submitAnswer,\r\n    reset,\r\n    trackMouseMovement,\r\n    trackKeystroke,\r\n    setHoneypotValue: _setHoneypotValue,\r\n    result\r\n  } = useCaptcha({ \r\n    difficulty, \r\n    onValidate\r\n  });\r\n  \r\n  // Track mouse movements\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      if (captchaRef.current) {\r\n        const rect = captchaRef.current.getBoundingClientRect();\r\n        trackMouseMovement(e.clientX - rect.left, e.clientY - rect.top, 'move');\r\n      }\r\n    };\r\n    \r\n    const handleClick = (e: MouseEvent) => {\r\n      if (captchaRef.current) {\r\n        const rect = captchaRef.current.getBoundingClientRect();\r\n        trackMouseMovement(e.clientX - rect.left, e.clientY - rect.top, 'click');\r\n      }\r\n    };\r\n    \r\n    const handleKeyDown = () => {\r\n      trackKeystroke();\r\n    };\r\n    \r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('click', handleClick);\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    \r\n    return () => {\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('click', handleClick);\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [trackMouseMovement, trackKeystroke]);\r\n  \r\n  // Drag and drop handlers\r\n  const handleDragStart = (e: React.DragEvent, emoji: string) => {\r\n    setDraggedItem(emoji);\r\n    e.dataTransfer.setData('text/plain', emoji);\r\n  };\r\n  \r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n  };\r\n  \r\n  const handleDrop = (e: React.DragEvent, targetEmoji: string) => {\r\n    e.preventDefault();\r\n    const draggedEmoji = e.dataTransfer.getData('text/plain');\r\n    \r\n    if (challenge && challengeType === 'drag-drop') {\r\n      const dragChallenge = challenge as DragDropChallenge;\r\n      const isCorrect = draggedEmoji === dragChallenge.sourceEmoji && targetEmoji === dragChallenge.targetEmoji;\r\n      submitAnswer(isCorrect).catch(console.error);\r\n    }\r\n    \r\n    setDraggedItem(null);\r\n  };\r\n  \r\n  // Audio challenge handlers\r\n  const playAudio = (soundType: string) => {\r\n    const audioUrl = generateAudioDataUrl(soundType);\r\n    const audio = new Audio(audioUrl);\r\n    audio.play().catch(console.error);\r\n  };\r\n  \r\n  const handleAudioSelect = (soundType: string) => {\r\n    setSelectedAudio(soundType);\r\n  };\r\n  \r\n  const handleAudioSubmit = () => {\r\n    if (selectedAudio) {\r\n      submitAnswer(selectedAudio).catch(console.error);\r\n    }\r\n  };\r\n  \r\n  // Emoji challenge handlers\r\n  const handleEmojiSelect = (emoji: string) => {\r\n    setSelectedEmoji(emoji);\r\n    submitAnswer(emoji).catch(console.error);\r\n  };\r\n  \r\n  // Reset selections when challenge changes\r\n  useEffect(() => {\r\n    setDraggedItem(null);\r\n    setSelectedAudio(null);\r\n    setSelectedEmoji(null);\r\n  }, [challengeType, challenge]);\r\n\r\n  // Modal step content\r\n  const getModalStepContent = () => {\r\n    const steps = [\r\n      {\r\n        title: getTranslation(lang, 'modalWelcomeTitle'),\r\n        content: getTranslation(lang, 'modalWelcomeContent'),\r\n        showNext: true\r\n      },\r\n      {\r\n        title: getTranslation(lang, 'modalInstructionsTitle'),\r\n        content: getTranslation(lang, 'modalInstructionsContent'),\r\n        showNext: true\r\n      },\r\n      {\r\n        title: getTranslation(lang, 'modalAudioTitle'),\r\n        content: getTranslation(lang, 'modalAudioContent'),\r\n        showNext: true\r\n      },\r\n      {\r\n        title: getTranslation(lang, 'modalReadyTitle'),\r\n        content: getTranslation(lang, 'modalReadyContent'),\r\n        showNext: false,\r\n        showStart: true\r\n      }\r\n    ];\r\n    \r\n    return steps[modalStep] ?? steps[0];\r\n  };\r\n\r\n  const handleModalNext = () => {\r\n    if (modalStep < 3) {\r\n      setModalStep(modalStep + 1);\r\n    }\r\n  };\r\n\r\n  const handleModalStart = () => {\r\n    setModalStep(0);\r\n    void startChallenge();\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setShowModal(false);\r\n    setModalStep(0);\r\n  };\r\n\r\n  const renderModal = () => {\r\n    if (!showModal) return null;\r\n    \r\n    // Show challenge in modal if challenge is active or just completed\r\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\r\n    if (challenge || (isCompleted && result)) {\r\n      return (\r\n        <div className=\"nexcaptcha-modal-overlay\" onClick={handleModalClose}>\r\n          <div className=\"nexcaptcha-modal nexcaptcha-challenge-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"nexcaptcha-modal-header\">\r\n              <h3>{getTranslation(lang, 'title')}</h3>\r\n              <button \r\n                className=\"nexcaptcha-modal-close\"\r\n                onClick={handleModalClose}\r\n                type=\"button\"\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"nexcaptcha-modal-body\">\r\n              {isLoading && (\r\n                <div className=\"nexcaptcha-loading\">\r\n                  <div className=\"nexcaptcha-spinner\"></div>\r\n                  <div>{getTranslation(lang, 'loading')}</div>\r\n                </div>\r\n              )}\r\n              \r\n              {isVerifying && (\r\n                <div className=\"nexcaptcha-verifying\">\r\n                  <div className=\"nexcaptcha-spinner\"></div>\r\n                  <div>{getTranslation(lang, 'verifying')}</div>\r\n                </div>\r\n              )}\r\n              \r\n              {isCompleted && result && result.success && (\r\n                <div className=\"nexcaptcha-success\">\r\n                  <div className=\"nexcaptcha-checkmark\">✓</div>\r\n                  <div>{getTranslation(lang, 'success')}</div>\r\n                  <button\r\n                    className=\"nexcaptcha-btn nexcaptcha-btn-primary nexcaptcha-btn-lg\"\r\n                    onClick={() => {\r\n                      setShowModal(false);\r\n                    }}\r\n                    type=\"button\"\r\n                  >\r\n                    {getTranslation(lang, 'close')}\r\n                  </button>\r\n                </div>\r\n              )}\r\n              \r\n              {isCompleted && result && !result.success && (\r\n                <div className=\"nexcaptcha-error\">\r\n                  <div className=\"nexcaptcha-error-icon\">✗</div>\r\n                  <div>{error ?? getTranslation(lang, 'failed')}</div>\r\n                  <div className=\"nexcaptcha-error-details\">\r\n                    {result.errors?.map((err, index) => (\r\n                      <div key={index} className=\"nexcaptcha-error-item\">{err}</div>\r\n                    ))}\r\n                  </div>\r\n                  <button\r\n                    className=\"nexcaptcha-btn nexcaptcha-btn-primary nexcaptcha-btn-lg\"\r\n                    onClick={() => {\r\n                      reset();\r\n                      setModalStep(0);\r\n                    }}\r\n                    type=\"button\"\r\n                  >\r\n                    {getTranslation(lang, 'retry')}\r\n                  </button>\r\n                </div>\r\n              )}\r\n              \r\n              {!isLoading && !isVerifying && !isCompleted && challenge && (\r\n                <div className=\"nexcaptcha-challenge\">\r\n                  <div className=\"nexcaptcha-challenge-content\">\r\n                    {challengeType === 'drag-drop' && renderDragDropChallenge()}\r\n                    {challengeType === 'audio' && renderAudioChallenge()}\r\n                    {challengeType === 'emoji-selection' && renderEmojiChallenge()}\r\n                  </div>\r\n                  <div className=\"nexcaptcha-challenge-actions\">\r\n                    <button\r\n                      className=\"nexcaptcha-btn nexcaptcha-btn-secondary nexcaptcha-regenerate-btn\"\r\n                      onClick={handleRegenerate}\r\n                      type=\"button\"\r\n                      title={getTranslation(lang, 'regenerate')}\r\n                    >\r\n                      🔄 {getTranslation(lang, 'regenerate')}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"nexcaptcha-modal-footer\">\r\n              <div className=\"nexcaptcha-attribution\">\r\n                {getTranslation(lang, 'attribution')}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // Show intro steps\r\n    const stepContent = getModalStepContent();\r\n    if (!stepContent) return null;\r\n    \r\n    return (\r\n      <div className=\"nexcaptcha-modal-overlay\" onClick={handleModalClose}>\r\n        <div className=\"nexcaptcha-modal\" onClick={(e) => e.stopPropagation()}>\r\n          <div className=\"nexcaptcha-modal-header\">\r\n            <h3>{stepContent.title}</h3>\r\n            <button \r\n              className=\"nexcaptcha-modal-close\"\r\n              onClick={handleModalClose}\r\n              type=\"button\"\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"nexcaptcha-modal-body\">\r\n            <div className=\"nexcaptcha-modal-content\">\r\n              <div>{stepContent.content}</div>\r\n            </div>\r\n            \r\n            {modalStep === 2 && (\r\n              <div className=\"nexcaptcha-audio-instructions\">\r\n                <h4>{getTranslation(lang, 'audioIntegrationTitle')}</h4>\r\n                <ol>\r\n                  <li>{getTranslation(lang, 'audioStep1')}</li>\r\n                  <li>{getTranslation(lang, 'audioStep2')}</li>\r\n                  <li>{getTranslation(lang, 'audioStep3')}</li>\r\n                  <li>{getTranslation(lang, 'audioStep4')}</li>\r\n                </ol>\r\n                <div className=\"nexcaptcha-audio-example\">\r\n                  <button \r\n                    className=\"nexcaptcha-btn nexcaptcha-btn-primary\"\r\n                    onClick={() => playAudio('cat')}\r\n                    type=\"button\"\r\n                  >\r\n                    🔊 {getTranslation(lang, 'playExample')}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"nexcaptcha-modal-footer\">\r\n            <div className=\"nexcaptcha-modal-progress\">\r\n              {Array.from({ length: 4 }, (_, i) => (\r\n                <div \r\n                  key={i} \r\n                  className={`nexcaptcha-progress-dot ${\r\n                    i <= modalStep ? 'active' : ''\r\n                  }`}\r\n                />\r\n              ))}\r\n            </div>\r\n            \r\n            <div className=\"nexcaptcha-modal-actions\">\r\n              {stepContent.showNext && (\r\n                <button \r\n                  className=\"nexcaptcha-btn nexcaptcha-btn-primary\"\r\n                  onClick={handleModalNext}\r\n                  type=\"button\"\r\n                >\r\n                  {getTranslation(lang, 'next')}\r\n                </button>\r\n              )}\r\n              \r\n              {stepContent.showStart && (\r\n                <button \r\n                  className=\"nexcaptcha-btn nexcaptcha-btn-primary\"\r\n                  onClick={handleModalStart}\r\n                  type=\"button\"\r\n                >\r\n                  {getTranslation(lang, 'startChallenge')}\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"nexcaptcha-modal-branding\">\r\n            <a \r\n              href=\"https://nexwinds.com\" \r\n              target=\"_blank\" \r\n              rel=\"noopener noreferrer\"\r\n              className=\"nexcaptcha-branding-link\"\r\n            >\r\n              by nexwinds.com\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const renderDragDropChallenge = () => {\r\n    if (!challenge || challengeType !== 'drag-drop') return null;\r\n    \r\n    const dragChallenge = challenge as DragDropChallenge;\r\n    \r\n    return (\r\n      <div className=\"nexcaptcha-drag-drop\">\r\n        <div className=\"nexcaptcha-instruction\">\r\n          {formatTranslation(lang, 'dragInstruction', {\r\n            source: dragChallenge.sourceEmoji,\r\n            target: dragChallenge.targetEmoji\r\n          })}\r\n        </div>\r\n        \r\n        <div className=\"nexcaptcha-drag-area\">\r\n          <div className=\"nexcaptcha-source-area\">\r\n            <div\r\n              className=\"nexcaptcha-draggable\"\r\n              draggable\r\n              onDragStart={(e) => handleDragStart(e, dragChallenge.sourceEmoji)}\r\n            >\r\n              {dragChallenge.sourceEmoji}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"nexcaptcha-arrow\">→</div>\r\n          \r\n          <div\r\n            className=\"nexcaptcha-drop-zone\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={(e) => handleDrop(e, dragChallenge.targetEmoji)}\r\n          >\r\n            {dragChallenge.targetEmoji}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const renderAudioChallenge = () => {\r\n    if (!challenge || challengeType !== 'audio') return null;\r\n    \r\n    const audioChallenge = challenge as AudioChallenge;\r\n    \r\n    return (\r\n      <div className=\"nexcaptcha-audio\">\r\n        <div className=\"nexcaptcha-instruction\">\r\n          {audioChallenge.instruction}\r\n        </div>\r\n        \r\n        <div className=\"nexcaptcha-audio-options\">\r\n          {audioChallenge.audioOptions.map((soundType, index) => (\r\n            <div key={index} className=\"nexcaptcha-audio-option\">\r\n              <button\r\n                className=\"nexcaptcha-btn nexcaptcha-btn-primary nexcaptcha-btn-sm\"\r\n                onClick={() => playAudio(soundType)}\r\n                type=\"button\"\r\n              >\r\n                ▶ {getTranslation(lang, 'playSound')}\r\n              </button>\r\n              <button\r\n                className={`nexcaptcha-select-button ${\r\n                  selectedAudio === soundType ? 'selected' : ''\r\n                }`}\r\n                onClick={() => handleAudioSelect(soundType)}\r\n                type=\"button\"\r\n              >\r\n                {selectedAudio === soundType ? '✓' : '○'}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        {selectedAudio && (\r\n          <button\r\n            className=\"nexcaptcha-btn nexcaptcha-btn-success nexcaptcha-btn-full\"\r\n            onClick={handleAudioSubmit}\r\n            type=\"button\"\r\n          >\r\n            {getTranslation(lang, 'submitAnswer')}\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const renderEmojiChallenge = () => {\r\n    if (!challenge || challengeType !== 'emoji-selection') return null;\r\n    \r\n    const emojiChallenge = challenge as EmojiChallenge;\r\n    \r\n    return (\r\n      <div className=\"nexcaptcha-emoji\">\r\n        <div className=\"nexcaptcha-instruction\">\r\n          {formatTranslation(lang, 'emojiInstruction', {\r\n            target: emojiChallenge.targetEmoji\r\n          })}\r\n        </div>\r\n        \r\n        <div className=\"nexcaptcha-emoji-grid\">\r\n          {emojiChallenge.emojiOptions.map((emoji, index) => (\r\n            <button\r\n              key={index}\r\n              className=\"nexcaptcha-emoji-option\"\r\n              onClick={() => handleEmojiSelect(emoji)}\r\n              type=\"button\"\r\n            >\r\n              {emoji}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const handleRegenerate = () => {\r\n    reset();\r\n    startChallenge();\r\n  };\r\n\r\n  const _renderContent = () => {\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"nexcaptcha-loading\">\r\n          <div className=\"nexcaptcha-spinner\"></div>\r\n          <div>{getTranslation(lang, 'loading')}</div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (isVerifying) {\r\n      return (\r\n        <div className=\"nexcaptcha-verifying\">\r\n          <div className=\"nexcaptcha-spinner\"></div>\r\n          <div>{getTranslation(lang, 'verifying')}</div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (isCompleted && result) {\r\n      if (result.success) {\r\n        return (\r\n          <div className=\"nexcaptcha-success\">\r\n            <div className=\"nexcaptcha-checkmark\">✓</div>\r\n            <div>{getTranslation(lang, 'success')}</div>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"nexcaptcha-error\">\r\n            <div className=\"nexcaptcha-error-icon\">✗</div>\r\n            <div>{error ?? getTranslation(lang, 'failed')}</div>\r\n            <button\r\n              className=\"nexcaptcha-btn nexcaptcha-btn-primary nexcaptcha-btn-lg\"\r\n              onClick={() => {\r\n                reset();\r\n                startChallenge();\r\n              }}\r\n              type=\"button\"\r\n            >\r\n              {getTranslation(lang, 'retry')}\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <div className=\"nexcaptcha-challenge\">\r\n        <div className=\"nexcaptcha-challenge-content\">\r\n          {renderDragDropChallenge()}\r\n          {renderAudioChallenge()}\r\n          {renderEmojiChallenge()}\r\n        </div>\r\n        <div className=\"nexcaptcha-challenge-actions\">\r\n          <button\r\n            className=\"nexcaptcha-btn nexcaptcha-btn-secondary nexcaptcha-regenerate-btn\"\r\n            onClick={handleRegenerate}\r\n            type=\"button\"\r\n            title={getTranslation(lang, 'regenerate')}\r\n          >\r\n            🔄 {getTranslation(lang, 'regenerate')}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  if (!challenge && !isLoading && !isCompleted) {\r\n    return (\r\n      <div className={`nexcaptcha ${className}`} ref={captchaRef}>\r\n        <div className=\"nexcaptcha-start\">\r\n          <button\r\n            className=\"nexcaptcha-circular-trigger\"\r\n            onClick={() => setShowModal(true)}\r\n            type=\"button\"\r\n          >\r\n            <div className=\"nexcaptcha-checkmark-icon\">✓</div>\r\n          </button>\r\n          <div className=\"nexcaptcha-start-text\">\r\n            {getTranslation(lang, 'clickToVerify')}\r\n          </div>\r\n        </div>\r\n        {renderModal()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`nexcaptcha ${className}`} ref={captchaRef}>\r\n      {_renderContent()}\r\n      {renderModal()}\r\n    </div>\r\n  );\r\n};","import { useState, useCallback, useRef } from 'react';\nimport { CaptchaResult, ChallengeType, DragDropChallenge, AudioChallenge, EmojiChallenge, ProofOfWorkChallenge } from '../types';\nimport { InvisibleFiltersTracker, createInvisibleFiltersTracker } from '../utils/invisibleFilters';\nimport { generateProofOfWork, solveProofOfWork, getDifficulty } from '../utils/proofOfWork';\nimport { generateRandomChallenge, validateChallengeAnswer } from '../utils/challenges';\nimport { validateCaptcha } from '../utils/validation';\n\nexport interface UseCaptchaOptions {\n  difficulty?: 'easy' | 'medium' | 'hard';\n  onValidate?: (result: CaptchaResult) => void;\n}\n\nexport interface UseCaptchaReturn {\n  // State\n  isLoading: boolean;\n  isVerifying: boolean;\n  isCompleted: boolean;\n  error: string | null;\n  \n  // Challenge data\n  challengeType: ChallengeType | null;\n  challenge: DragDropChallenge | AudioChallenge | EmojiChallenge | null;\n  \n  // Actions\n  startChallenge: () => void;\n  submitAnswer: (answer: string | boolean) => Promise<void>;\n  reset: () => void;\n  \n  // Invisible filters\n  trackMouseMovement: (x: number, y: number, type?: 'move' | 'click' | 'touch') => void;\n  trackKeystroke: () => void;\n  setHoneypotValue: (value: string) => void;\n  \n  // Result\n  result: CaptchaResult | null;\n}\n\nexport function useCaptcha(options: UseCaptchaOptions = {}): UseCaptchaReturn {\n  const { difficulty = 'medium', onValidate } = options;\n  \n  // State\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [challengeType, setChallengeType] = useState<ChallengeType | null>(null);\n  const [challenge, setChallenge] = useState<DragDropChallenge | AudioChallenge | EmojiChallenge | null>(null);\n  const [result, setResult] = useState<CaptchaResult | null>(null);\n  \n  // Refs for persistent data\n  const invisibleFiltersRef = useRef<InvisibleFiltersTracker>(createInvisibleFiltersTracker());\n  const proofOfWorkChallengeRef = useRef<ProofOfWorkChallenge | null>(null);\n  const proofOfWorkNonceRef = useRef<string | null>(null);\n  \n  /**\n   * Start a new CAPTCHA challenge\n   */\n  const startChallenge = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setIsCompleted(false);\n    setResult(null);\n    \n    try {\n      // Reset invisible filters\n      invisibleFiltersRef.current.reset();\n      \n      // Generate proof of work challenge\n      const powDifficulty = getDifficulty(difficulty);\n      proofOfWorkChallengeRef.current = generateProofOfWork(powDifficulty);\n      \n      // Start solving proof of work in background\n      void solveProofOfWork(proofOfWorkChallengeRef.current).then(nonce => {\n        proofOfWorkNonceRef.current = nonce;\n      });\n      \n      // Generate interactive challenge\n      const { type, challenge: generatedChallenge } = generateRandomChallenge();\n      setChallengeType(type);\n      setChallenge(generatedChallenge);\n      \n      setIsLoading(false);\n    } catch (err) {\n      setError('Failed to initialize CAPTCHA');\n      setIsLoading(false);\n    }\n  }, [difficulty]);\n  \n  /**\n   * Submit challenge answer\n   */\n  const submitAnswer = useCallback(async (answer: string | boolean) => {\n    if (!challengeType || !challenge || !proofOfWorkChallengeRef.current) {\n      setError('CAPTCHA not properly initialized');\n      return;\n    }\n    \n    setIsVerifying(true);\n    setError(null);\n    \n    try {\n      // Wait for proof of work to complete if not ready\n      let attempts = 0;\n      while (!proofOfWorkNonceRef.current && attempts < 50) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        attempts++;\n      }\n      \n      if (!proofOfWorkNonceRef.current) {\n        throw new Error('Proof of work timeout');\n      }\n      \n      // Validate challenge answer\n      const challengeResult = validateChallengeAnswer(challengeType, challenge, answer);\n      \n      // Perform complete validation\n      const captchaResult = validateCaptcha(\n        invisibleFiltersRef.current,\n        proofOfWorkChallengeRef.current,\n        proofOfWorkNonceRef.current,\n        challengeResult\n      );\n      \n      setResult(captchaResult);\n      setIsCompleted(true);\n      \n      // Call validation callback\n      if (onValidate) {\n        onValidate(captchaResult);\n      }\n      \n      if (!captchaResult.success) {\n        setError(captchaResult.errors?.join(', ') ?? 'Validation failed');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Validation failed';\n      setError(errorMessage);\n    } finally {\n      setIsVerifying(false);\n    }\n  }, [challengeType, challenge, onValidate]);\n  \n  /**\n   * Reset CAPTCHA state\n   */\n  const reset = useCallback(() => {\n    setIsLoading(false);\n    setIsVerifying(false);\n    setIsCompleted(false);\n    setError(null);\n    setChallengeType(null);\n    setChallenge(null);\n    setResult(null);\n    \n    // Reset refs\n    invisibleFiltersRef.current.reset();\n    proofOfWorkChallengeRef.current = null;\n    proofOfWorkNonceRef.current = null;\n  }, []);\n  \n  /**\n   * Track mouse movement for invisible filters\n   */\n  const trackMouseMovement = useCallback((x: number, y: number, type: 'move' | 'click' | 'touch' = 'move') => {\n    invisibleFiltersRef.current.trackMouseMovement(x, y, type);\n  }, []);\n  \n  /**\n   * Track keystroke for invisible filters\n   */\n  const trackKeystroke = useCallback(() => {\n    invisibleFiltersRef.current.trackKeystroke();\n  }, []);\n  \n  /**\n   * Set honeypot value for invisible filters\n   */\n  const setHoneypotValue = useCallback((value: string) => {\n    invisibleFiltersRef.current.setHoneypotValue(value);\n  }, []);\n  \n  // Don't auto-start challenge on mount - let user trigger it\n  \n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  return {\n    // State\n    isLoading,\n    isVerifying,\n    isCompleted,\n    error,\n    \n    // Challenge data\n    challengeType,\n    challenge,\n    \n    // Actions\n    startChallenge,\n    submitAnswer,\n    reset,\n    \n    // Invisible filters\n    trackMouseMovement,\n    trackKeystroke,\n    setHoneypotValue,\n    \n    // Result\n    result\n  };\n}","import { InvisibleFilters, MouseMovement } from '../types';\n\n/**\n * Class to handle invisible bot detection filters\n */\nexport class InvisibleFiltersTracker {\n  private startTime: number;\n  private mouseMovements: MouseMovement[] = [];\n  private keystrokes = 0;\n  private keystrokeStartTime = 0;\n  private honeypotValue = '';\n\n  constructor() {\n    this.startTime = Date.now();\n    this.keystrokeStartTime = Date.now();\n  }\n\n  /**\n   * Track mouse movement\n   */\n  trackMouseMovement(x: number, y: number, type: 'move' | 'click' | 'touch' = 'move'): void {\n    this.mouseMovements.push({\n      x,\n      y,\n      timestamp: Date.now(),\n      type\n    });\n\n    // Keep only last 100 movements to prevent memory issues\n    if (this.mouseMovements.length > 100) {\n      this.mouseMovements = this.mouseMovements.slice(-100);\n    }\n  }\n\n  /**\n   * Track keystroke for typing speed calculation\n   */\n  trackKeystroke(): void {\n    this.keystrokes++;\n  }\n\n  /**\n   * Set honeypot field value (should remain empty for humans)\n   */\n  setHoneypotValue(value: string): void {\n    this.honeypotValue = value;\n  }\n\n  /**\n   * Get current typing speed in characters per minute\n   */\n  getTypingSpeed(): number {\n    const timeElapsed = (Date.now() - this.keystrokeStartTime) / 1000 / 60; // minutes\n    return timeElapsed > 0 ? this.keystrokes / timeElapsed : 0;\n  }\n\n  /**\n   * Get time elapsed since tracker initialization\n   */\n  getTimeElapsed(): number {\n    return Date.now() - this.startTime;\n  }\n\n  /**\n   * Validate invisible filters\n   */\n  validate(): { isValid: boolean; reasons: string[] } {\n    const reasons: string[] = [];\n    let isValid = true;\n\n    // Check honeypot field (should be empty)\n    if (this.honeypotValue.trim() !== '') {\n      isValid = false;\n      reasons.push('Honeypot field filled');\n    }\n\n    // Check minimum time (3.15 seconds)\n    const timeElapsed = this.getTimeElapsed();\n    if (timeElapsed < 3150) {\n      isValid = false;\n      reasons.push('Submission too fast');\n    }\n\n    // Check for mouse movements (humans should have some)\n    if (this.mouseMovements.length < 3) {\n      isValid = false;\n      reasons.push('Insufficient mouse activity');\n    }\n\n    // Check for realistic mouse movement patterns\n    if (this.mouseMovements.length > 0) {\n      const movements = this.mouseMovements.filter(m => m.type === 'move');\n      if (movements.length > 5) {\n        // Check for too linear movements (bot-like)\n        const linearMovements = this.detectLinearMovements(movements);\n        if (linearMovements > movements.length * 0.8) {\n          isValid = false;\n          reasons.push('Suspicious movement patterns');\n        }\n      }\n    }\n\n    // Check typing speed (too fast might indicate bot)\n    const typingSpeed = this.getTypingSpeed();\n    if (typingSpeed > 300) { // More than 300 CPM is suspicious\n      isValid = false;\n      reasons.push('Typing speed too high');\n    }\n\n    return { isValid, reasons };\n  }\n\n  /**\n   * Detect linear mouse movements (bot-like behavior)\n   */\n  private detectLinearMovements(movements: MouseMovement[]): number {\n    let linearCount = 0;\n    \n    for (let i = 2; i < movements.length; i++) {\n      const prev2 = movements[i - 2];\n      const prev1 = movements[i - 1];\n      const current = movements[i];\n      \n      if (!prev2 || !prev1 || !current) continue;\n      \n      // Calculate if three consecutive points are roughly in a line\n      const dx1 = prev1.x - prev2.x;\n      const dy1 = prev1.y - prev2.y;\n      const dx2 = current.x - prev1.x;\n      const dy2 = current.y - prev1.y;\n      \n      // Check if the direction is very similar (linear movement)\n      if (dx1 !== 0 && dx2 !== 0) {\n        const slope1 = dy1 / dx1;\n        const slope2 = dy2 / dx2;\n        if (Math.abs(slope1 - slope2) < 0.1) {\n          linearCount++;\n        }\n      } else if (dx1 === 0 && dx2 === 0) {\n        // Vertical line\n        linearCount++;\n      } else if (dy1 === 0 && dy2 === 0) {\n        // Horizontal line\n        linearCount++;\n      }\n    }\n    \n    return linearCount;\n  }\n\n  /**\n   * Get current filter data\n   */\n  getFilterData(): InvisibleFilters {\n    return {\n      honeypot: this.honeypotValue,\n      mouseMovements: [...this.mouseMovements],\n      typingSpeed: this.getTypingSpeed(),\n      submissionTime: Date.now(),\n      startTime: this.startTime\n    };\n  }\n\n  /**\n   * Reset all tracking data\n   */\n  reset(): void {\n    this.startTime = Date.now();\n    this.keystrokeStartTime = Date.now();\n    this.mouseMovements = [];\n    this.keystrokes = 0;\n    this.honeypotValue = '';\n  }\n}\n\n/**\n * Create a new invisible filters tracker instance\n */\nexport function createInvisibleFiltersTracker(): InvisibleFiltersTracker {\n  return new InvisibleFiltersTracker();\n}","import { ProofOfWorkChallenge } from '../types';\n\n/**\n * Simple hash function for proof of work (similar to hashcash)\n */\nfunction simpleHash(input: string): string {\n  let hash = 0;\n  for (let i = 0; i < input.length; i++) {\n    const char = input.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString(16);\n}\n\n/**\n * Generate a proof of work challenge\n */\nexport function generateProofOfWork(difficulty = 4): ProofOfWorkChallenge {\n  const timestamp = Date.now();\n  const randomData = Math.random().toString(36).substring(2);\n  const target = '0'.repeat(difficulty);\n  \n  return {\n    difficulty,\n    target,\n    // Include timestamp and random data to prevent pre-computation\n    nonce: `${timestamp}-${randomData}`\n  };\n}\n\n/**\n * Solve the proof of work challenge\n */\nexport function solveProofOfWork(challenge: ProofOfWorkChallenge): Promise<string> {\n  return new Promise((resolve) => {\n    const startTime = Date.now();\n    let counter = 0;\n    \n    const solve = () => {\n      const batchSize = 1000; // Process in batches to avoid blocking UI\n      \n      for (let i = 0; i < batchSize; i++) {\n        const nonce = `${challenge.nonce}-${counter}`;\n        const hash = simpleHash(nonce);\n        \n        if (hash.startsWith(challenge.target)) {\n          resolve(nonce);\n          return;\n        }\n        \n        counter++;\n        \n        // Prevent infinite loops - max 10 seconds\n        if (Date.now() - startTime > 10000) {\n          resolve(`timeout-${counter}`);\n          return;\n        }\n      }\n      \n      // Continue in next tick to avoid blocking\n      setTimeout(solve, 0);\n    };\n    \n    solve();\n  });\n}\n\n/**\n * Validate a proof of work solution\n */\nexport function validateProofOfWork(challenge: ProofOfWorkChallenge, nonce: string): boolean {\n  if (!nonce || nonce.startsWith('timeout-')) {\n    return false;\n  }\n  \n  const hash = simpleHash(nonce);\n  return hash.startsWith(challenge.target);\n}\n\n/**\n * Get difficulty based on user preference\n */\nexport function getDifficulty(level: 'easy' | 'medium' | 'hard'): number {\n  switch (level) {\n    case 'easy':\n      return 3;\n    case 'medium':\n      return 4;\n    case 'hard':\n      return 5;\n    default:\n      return 4;\n  }\n}","import { DragDropChallenge, AudioChallenge, EmojiChallenge, ChallengeType } from '../types';\n\n// Emoji sets for different challenge types\nconst ANIMALS = ['🐱', '🐶', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯', '🦁', '🐮', '🐷', '🐸', '🐵'];\nconst FOOD = ['🍎', '🍌', '🍊', '🍋', '🍉', '🍇', '🍓', '🥝', '🍑', '🥭', '🍍', '🥥', '🥕', '🌽', '🥒'];\nconst OBJECTS = ['⚽', '🏀', '🏈', '⚾', '🎾', '🏐', '🏓', '🏸', '🥅', '🎯', '🎱', '🎳', '🎮', '🎲', '🎭'];\nconst NATURE = ['🌸', '🌺', '🌻', '🌷', '🌹', '🌼', '🌿', '🍀', '🌱', '🌲', '🌳', '🌴', '🌵', '🌾', '🌊'];\n\n// Sound types for audio challenges - mapped to actual audio files\nconst SOUND_TYPES = [\n  { emoji: '🐱', sound: 'cat', description: 'meow', file: 'assets/audio/farm-animals/cat.mp3' },\n  { emoji: '🐶', sound: 'dog', description: 'bark', file: 'assets/audio/farm-animals/dog.mp3' },\n  { emoji: '🐄', sound: 'cow', description: 'moo', file: 'assets/audio/farm-animals/cow.mp3' },\n  { emoji: '🦆', sound: 'duck', description: 'quack', file: 'assets/audio/farm-animals/duck.mp3' },\n  { emoji: '🦜', sound: 'red-parrot', description: 'chirp', file: 'assets/audio/birds/red-parrot.mp3' },\n  { emoji: '🦁', sound: 'lion', description: 'roar', file: 'assets/audio/jungle-animals/lion.mp3' },\n  { emoji: '🐅', sound: 'tiger', description: 'growl', file: 'assets/audio/jungle-animals/tiger.mp3' }\n];\n\n/**\n * Generate a random drag and drop challenge\n */\nexport function generateDragDropChallenge(): DragDropChallenge {\n  const challenges = [\n    { source: ANIMALS, target: FOOD, instruction: 'Move the animal to the food' },\n    { source: FOOD, target: ANIMALS, instruction: 'Feed the animal' },\n    { source: OBJECTS, target: NATURE, instruction: 'Place the object in nature' },\n    { source: NATURE, target: OBJECTS, instruction: 'Combine nature with the object' }\n  ];\n  \n  const challenge = challenges[Math.floor(Math.random() * challenges.length)];\n  const sourceEmoji = challenge.source[Math.floor(Math.random() * challenge.source.length)];\n  const targetEmoji = challenge.target[Math.floor(Math.random() * challenge.target.length)];\n  \n  return {\n    sourceEmoji,\n    targetEmoji,\n    instruction: challenge.instruction\n  };\n}\n\n/**\n * Generate a random audio challenge\n */\nexport function generateAudioChallenge(): AudioChallenge {\n  const targetSound = SOUND_TYPES[Math.floor(Math.random() * SOUND_TYPES.length)];\n  \n  // Create 3 audio options including the target\n  const otherSounds = SOUND_TYPES.filter(s => s.sound !== targetSound.sound);\n  const shuffledOthers = otherSounds.sort(() => Math.random() - 0.5).slice(0, 2);\n  \n  const audioOptions = [targetSound, ...shuffledOthers]\n    .sort(() => Math.random() - 0.5)\n    .map(s => s.sound);\n  \n  return {\n    targetSound: targetSound.sound,\n    audioOptions,\n    instruction: `Click the ${targetSound.description} sound`\n  };\n}\n\n/**\n * Generate a random emoji selection challenge\n */\nexport function generateEmojiChallenge(): EmojiChallenge {\n  const allEmojis = [...ANIMALS, ...FOOD, ...OBJECTS, ...NATURE];\n  const targetEmoji = allEmojis[Math.floor(Math.random() * allEmojis.length)];\n  \n  // Create 8 emoji options including the target\n  const otherEmojis = allEmojis.filter(e => e !== targetEmoji);\n  const shuffledOthers = otherEmojis.sort(() => Math.random() - 0.5).slice(0, 7);\n  \n  const emojiOptions = [targetEmoji, ...shuffledOthers]\n    .sort(() => Math.random() - 0.5);\n  \n  return {\n    targetEmoji,\n    emojiOptions,\n    instruction: `Click the ${targetEmoji} emoji`\n  };\n}\n\n/**\n * Generate a random challenge of any type\n */\nexport function generateRandomChallenge(): {\n  type: ChallengeType;\n  challenge: DragDropChallenge | AudioChallenge | EmojiChallenge;\n} {\n  const types: ChallengeType[] = ['drag-drop', 'audio', 'emoji-selection'];\n  const randomType = types[Math.floor(Math.random() * types.length)];\n  \n  switch (randomType) {\n    case 'drag-drop':\n      return {\n        type: 'drag-drop',\n        challenge: generateDragDropChallenge()\n      };\n    case 'audio':\n      return {\n        type: 'audio',\n        challenge: generateAudioChallenge()\n      };\n    case 'emoji-selection':\n      return {\n        type: 'emoji-selection',\n        challenge: generateEmojiChallenge()\n      };\n    default:\n      return {\n        type: 'emoji-selection',\n        challenge: generateEmojiChallenge()\n      };\n  }\n}\n\n/**\n * Get audio file URL for sound challenges\n * Returns the path to the actual audio file\n */\nexport function generateAudioDataUrl(soundType: string): string {\n  const soundTypeData = SOUND_TYPES.find(s => s.sound === soundType);\n  \n  if (!soundTypeData) {\n    console.warn(`Sound type '${soundType}' not found, falling back to cat sound`);\n    return 'assets/audio/farm-animals/cat.mp3';\n  }\n  \n  return soundTypeData.file;\n}\n\n/**\n * Validate challenge answer\n */\nexport function validateChallengeAnswer(\n  type: ChallengeType,\n  challenge: DragDropChallenge | AudioChallenge | EmojiChallenge,\n  answer: string | boolean\n): boolean {\n  switch (type) {\n    case 'drag-drop': {\n      const _dragChallenge = challenge as DragDropChallenge;\n      return answer === true; // Drag was completed successfully\n    }\n      \n    case 'audio': {\n      const audioChallenge = challenge as AudioChallenge;\n      return answer === audioChallenge.targetSound;\n    }\n      \n    case 'emoji-selection': {\n      const emojiChallenge = challenge as EmojiChallenge;\n      return answer === emojiChallenge.targetEmoji;\n    }\n      \n    default:\n      return false;\n  }\n}","import { CaptchaResult, ValidationResult, InvisibleFilters as _InvisibleFilters, ProofOfWorkChallenge } from '../types';\nimport { validateProofOfWork } from './proofOfWork';\nimport { InvisibleFiltersTracker } from './invisibleFilters';\n\n/**\n * Validate the complete CAPTCHA result\n * All three layers must pass for successful validation\n */\nexport function validateCaptcha(\n  invisibleFilters: InvisibleFiltersTracker,\n  proofOfWorkChallenge: ProofOfWorkChallenge,\n  proofOfWorkNonce: string,\n  challengeResult: boolean\n): CaptchaResult {\n  const timestamp = Date.now();\n  const errors: string[] = [];\n  \n  // Layer 1: Invisible Filters Validation\n  const invisibleValidation = invisibleFilters.validate();\n  if (!invisibleValidation.isValid) {\n    errors.push(...invisibleValidation.reasons);\n  }\n  \n  // Layer 2: Proof of Work Validation\n  const proofOfWorkValid = validateProofOfWork(proofOfWorkChallenge, proofOfWorkNonce);\n  if (!proofOfWorkValid) {\n    errors.push('Proof of work validation failed');\n  }\n  \n  // Layer 3: Interactive Challenge Validation\n  if (!challengeResult) {\n    errors.push('Interactive challenge failed');\n  }\n  \n  // All layers must pass\n  const success = invisibleValidation.isValid && proofOfWorkValid && challengeResult;\n  \n  return {\n    success,\n    timestamp,\n    proofOfWork: proofOfWorkNonce,\n    challengeResult,\n    invisibleFiltersResult: invisibleValidation.isValid,\n    errors: errors.length > 0 ? errors : undefined\n  };\n}\n\n/**\n * Validate individual layers for debugging purposes\n */\nexport function validateLayer(\n  layer: 'invisible' | 'proof-of-work' | 'challenge',\n  data: InvisibleFiltersTracker | { nonce: string; challenge: ProofOfWorkChallenge } | boolean\n): ValidationResult {\n  switch (layer) {\n    case 'invisible':\n      if (data instanceof InvisibleFiltersTracker) {\n        const result = data.validate();\n        return {\n          isValid: result.isValid,\n          layer: 'invisible',\n          details: result.reasons.join(', ')\n        };\n      }\n      return {\n        isValid: false,\n        layer: 'invisible',\n        details: 'Invalid invisible filters data'\n      };\n      \n    case 'proof-of-work':\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (typeof data === 'object' && data !== null && 'challenge' in data && 'nonce' in data) {\n        const powData = data as { nonce: string; challenge: ProofOfWorkChallenge };\n        const isValid = validateProofOfWork(powData.challenge, powData.nonce);\n        return {\n          isValid,\n          layer: 'proof-of-work',\n          details: isValid ? 'Valid proof of work' : 'Invalid proof of work'\n        };\n      }\n      return {\n        isValid: false,\n        layer: 'proof-of-work',\n        details: 'Missing challenge or nonce'\n      };\n      \n    case 'challenge':\n      return {\n        isValid: Boolean(data),\n        layer: 'challenge',\n        details: data ? 'Challenge completed' : 'Challenge failed'\n      };\n      \n    default:\n      return {\n        isValid: false,\n        layer: 'invisible',\n        details: 'Unknown validation layer'\n      };\n  }\n}\n\n/**\n * Server-side validation helper\n * This function can be used on the server to validate CAPTCHA results\n */\nexport function validateCaptchaServer(\n  captchaResult: CaptchaResult,\n  expectedTimestamp?: number,\n  maxAge = 300000 // 5 minutes\n): { isValid: boolean; reason?: string } {\n  // Check if result is successful\n  if (!captchaResult.success) {\n    return {\n      isValid: false,\n      reason: 'CAPTCHA validation failed'\n    };\n  }\n  \n  // Check timestamp validity (prevent replay attacks)\n  if (expectedTimestamp) {\n    const timeDiff = Math.abs(captchaResult.timestamp - expectedTimestamp);\n    if (timeDiff > maxAge) {\n      return {\n        isValid: false,\n        reason: 'CAPTCHA result expired'\n      };\n    }\n  }\n  \n  // Check that all layers passed\n  if (!captchaResult.invisibleFiltersResult || !captchaResult.challengeResult) {\n    return {\n      isValid: false,\n      reason: 'One or more validation layers failed'\n    };\n  }\n  \n  // Validate proof of work format\n  if (!captchaResult.proofOfWork || captchaResult.proofOfWork.length < 10) {\n    return {\n      isValid: false,\n      reason: 'Invalid proof of work'\n    };\n  }\n  \n  return {\n    isValid: true\n  };\n}\n\n/**\n * Generate a secure token for server validation\n */\nexport function generateValidationToken(captchaResult: CaptchaResult, secret: string): string {\n  // Simple token generation - in production, use proper HMAC\n  const data = `${captchaResult.timestamp}-${captchaResult.proofOfWork}-${secret}`;\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  return Math.abs(hash).toString(36);\n}","import { Translations } from './types';\n\nexport const translations: Translations = {\n  en: {\n    title: 'Are you a robot?',\n    dragInstruction: 'Drag the {source} to the {target}',\n    audioInstruction: 'Click the {target} sound among the audio tracks',\n    emojiInstruction: 'Click the {target} emoji',\n    loading: 'Loading...',\n    verifying: 'Verifying...',\n    success: 'Verification successful!',\n    failed: 'Verification failed. Please try again.',\n    retry: 'Try Again',\n    playSound: 'Play Sound',\n    submitAnswer: 'Submit Answer',\n    attribution: 'by nexwinds.com',\n    clickToVerify: 'Click to verify you\\'re human',\n    modalWelcomeTitle: 'Welcome to nexcaptcha',\n    modalWelcomeContent: 'This verification system uses advanced security layers to protect against automated attacks while maintaining a smooth user experience.',\n    modalInstructionsTitle: 'How it works',\n    modalInstructionsContent: 'You\\'ll complete a series of interactive challenges designed to verify human behavior. These may include drag-and-drop tasks, audio recognition, or visual puzzles.',\n    modalAudioTitle: 'Audio Integration',\n    modalAudioContent: 'Some challenges include audio components for accessibility and enhanced security.',\n    modalReadyTitle: 'Ready to start?',\n    modalReadyContent: 'Click the button below to begin your verification challenge. The process typically takes 10-30 seconds.',\n    audioIntegrationTitle: 'Audio Integration Steps:',\n    audioStep1: 'Audio files are dynamically generated based on challenge content',\n    audioStep2: 'Use the play button to hear the audio challenge',\n    audioStep3: 'Select or input your answer based on what you hear',\n    audioStep4: 'Audio challenges support multiple languages and accessibility features',\n    playExample: 'Play Example',\n    next: 'Next',\n    startChallenge: 'Start Challenge',\n    regenerate: 'New Challenge',\n    close: 'Close',\n    verified: 'Verified'\n  },\n  pt: {\n    title: 'Você é um robô?',\n    dragInstruction: 'Arraste o {source} para o {target}',\n    audioInstruction: 'Clique no som {target} entre as faixas de áudio',\n    emojiInstruction: 'Clique no emoji {target}',\n    loading: 'Carregando...',\n    verifying: 'Verificando...',\n    success: 'Verificação bem-sucedida!',\n    failed: 'Verificação falhou. Tente novamente.',\n    retry: 'Tentar Novamente',\n    playSound: 'Reproduzir Som',\n    submitAnswer: 'Enviar Resposta',\n    attribution: 'Por nexwinds.com',\n    regenerate: 'Novo Desafio',\n    close: 'Fechar',\n    verified: 'Verificado'\n  },\n  es: {\n    title: '¿Eres un robot?',\n    dragInstruction: 'Arrastra el {source} al {target}',\n    audioInstruction: 'Haz clic en el sonido {target} entre las pistas de audio',\n    emojiInstruction: 'Haz clic en el emoji {target}',\n    loading: 'Cargando...',\n    verifying: 'Verificando...',\n    success: '¡Verificación exitosa!',\n    failed: 'Verificación fallida. Inténtalo de nuevo.',\n    retry: 'Intentar de Nuevo',\n    playSound: 'Reproducir Sonido',\n    submitAnswer: 'Enviar Respuesta',\n    attribution: 'Por nexwinds.com',\n    regenerate: 'Nuevo Desafío',\n    close: 'Cerrar',\n    verified: 'Verificado'\n  },\n  fr: {\n    title: 'Êtes-vous un robot?',\n    dragInstruction: 'Faites glisser le {source} vers le {target}',\n    audioInstruction: 'Cliquez sur le son {target} parmi les pistes audio',\n    emojiInstruction: 'Cliquez sur l\\'emoji {target}',\n    loading: 'Chargement...',\n    verifying: 'Vérification...',\n    success: 'Vérification réussie!',\n    failed: 'Vérification échouée. Veuillez réessayer.',\n    retry: 'Réessayer',\n    playSound: 'Jouer le Son',\n    submitAnswer: 'Soumettre la Réponse',\n    attribution: 'Par nexwinds.com',\n    regenerate: 'Nouveau Défi',\n    close: 'Fermer',\n    verified: 'Vérifié'\n  },\n  de: {\n    title: 'Sind Sie ein Roboter?',\n    dragInstruction: 'Ziehen Sie das {source} zum {target}',\n    audioInstruction: 'Klicken Sie auf den {target}-Sound unter den Audiospuren',\n    emojiInstruction: 'Klicken Sie auf das {target}-Emoji',\n    loading: 'Laden...',\n    verifying: 'Überprüfung...',\n    success: 'Überprüfung erfolgreich!',\n    failed: 'Überprüfung fehlgeschlagen. Bitte versuchen Sie es erneut.',\n    retry: 'Erneut Versuchen',\n    playSound: 'Sound Abspielen',\n    submitAnswer: 'Antwort Senden',\n    attribution: 'Von nexwinds.com',\n    regenerate: 'Neue Herausforderung',\n    close: 'Schließen',\n    verified: 'Verifiziert'\n  }\n};\n\nexport const getTranslation = (lang: string, key: string): string => {\n  const langTranslations = translations[lang as keyof typeof translations] ?? translations.en;\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  return langTranslations[key as keyof typeof langTranslations] ?? translations.en[key as keyof typeof translations.en];\n};\n\nexport const formatTranslation = (lang: string, key: string, params: Record<string, string>): string => {\n  let text = getTranslation(lang, key);\n  Object.entries(params).forEach(([param, value]) => {\n    text = text.replace(`{${param}}`, value);\n  });\n  return text;\n};","import React from 'react';\r\nimport { Captcha } from './Captcha';\r\nimport { CaptchaResult } from '../types';\r\n\r\ninterface SimpleCaptchaProps {\r\n  onSuccess?: () => void;\r\n  onError?: (error: string) => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Simplified CAPTCHA component with minimal configuration required.\r\n * Perfect for quick integration with just 1-2 lines of code.\r\n */\r\nexport const SimpleCaptcha: React.FC<SimpleCaptchaProps> = ({\r\n  onSuccess,\r\n  onError,\r\n  className\r\n}) => {\r\n  const handleValidate = (result: CaptchaResult) => {\r\n    if (result.success) {\r\n      onSuccess?.();\r\n    } else {\r\n      onError?.(result.errors?.[0] ?? 'Verification failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Captcha\r\n      className={className}\r\n      onValidate={handleValidate}\r\n      difficulty=\"medium\"\r\n      lang=\"en\"\r\n    />\r\n  );\r\n};"],"mappings":"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","names":["import_react","import_jsx_runtime"]}